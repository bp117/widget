import React, { useState } from 'react';
import {
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Typography,
  Box,
  IconButton,
} from '@mui/material';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';

interface Citation {
  book: string;
  passage_id: string;
  hyperlink: string;
  context: string;
}

interface FancySearchWidgetProps {
  apiUrl: string;
  task: string;
  useCaseId: string;
  promptId: string;
  apiKey: string;
  darkMode?: boolean;
  widgetParams?: any;
  onLoad?: () => void;
  // Styling props
  styles?: {
    backgroundColor?: string;
    textColor?: string;
    borderColor?: string;
    buttonColor?: string;
    fontFamily?: string;
  };
  // Citations prop
  citations?: Citation[];
}

const FancySearchWidget: React.FC<FancySearchWidgetProps> = ({
  apiUrl,
  task,
  useCaseId,
  promptId,
  apiKey,
  darkMode,
  widgetParams,
  onLoad,
  styles,
  citations = [], // Assuming citations come as a prop
}) => {
  const [loading, setLoading] = React.useState(false);
  const [searchResults, setSearchResults] = React.useState<any[]>([]);
  const [searchQuery, setSearchQuery] = React.useState('');

  const handleSearch = async () => {
    if (!searchQuery) return;

    setLoading(true);

    try {
      const response = await fetch(`${apiUrl}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${apiKey}`,
        },
        body: JSON.stringify({
          task,
          useCaseId,
          promptId,
          query: searchQuery,
          ...widgetParams,
        }),
      });

      const data = await response.json();
      setSearchResults(data.results || []);
    } catch (error) {
      console.error('Error fetching search results:', error);
    } finally {
      setLoading(false);
      if (onLoad) onLoad();
    }
  };

  return (
    <Box
      sx={{
        backgroundColor: styles?.backgroundColor || (darkMode ? '#333' : '#fff'),
        color: styles?.textColor || (darkMode ? '#fff' : '#000'),
        borderColor: styles?.borderColor || (darkMode ? '#555' : '#ccc'),
        borderRadius: '8px',
        padding: '16px',
        fontFamily: styles?.fontFamily || 'Arial, sans-serif',
        boxShadow: '0px 4px 8px rgba(0, 0, 0, 0.1)',
        maxWidth: '400px',
      }}
    >
      {/* Citations Section */}
      <Typography variant="h6" sx={{ marginBottom: '16px' }}>
        Citations
      </Typography>
      {citations.length > 0 ? (
        citations.map((citation, index) => (
          <Accordion key={index}>
            <AccordionSummary
              expandIcon={<ExpandMoreIcon />}
              aria-controls={`citation-content-${index}`}
              id={`citation-header-${index}`}
              sx={{
                backgroundColor: darkMode ? '#444' : '#f9f9f9',
                color: styles?.textColor || (darkMode ? '#fff' : '#000'),
              }}
            >
              <Typography variant="body1" sx={{ fontWeight: 'bold' }}>
                {citation.book}
              </Typography>
            </AccordionSummary>
            <AccordionDetails
              sx={{
                backgroundColor: darkMode ? '#555' : '#fff',
                color: styles?.textColor || (darkMode ? '#fff' : '#000'),
              }}
            >
              <Typography variant="body2">
                <strong>Passage ID:</strong> {citation.passage_id}
              </Typography>
              <Typography variant="body2">
                <strong>Context:</strong> {citation.context}
              </Typography>
              <Typography variant="body2" component="a" href={citation.hyperlink} target="_blank" rel="noopener noreferrer">
                Read more
              </Typography>
            </AccordionDetails>
          </Accordion>
        ))
      ) : (
        <Typography variant="body2" sx={{ fontStyle: 'italic' }}>
          No citations available.
        </Typography>
      )}
    </Box>
  );
};

export default FancySearchWidget;
